/*
*应用B中数据库设计：确保数据库能够存储多个用户的设置。
*/
public class ControlDbHelper extends SQLiteOpenHelper {
    private static final String DATABASE_NAME = "controls.db";
    private static final int DATABASE_VERSION = 1;

    public static final String TABLE_NAME = "control_states";
    public static final String COLUMN_USER_ID = "user_id";
    public static final String COLUMN_VISIBLE = "visible";

    public ControlDbHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL("CREATE TABLE " + TABLE_NAME + " (" +
            COLUMN_USER_ID + " TEXT PRIMARY KEY," +
            COLUMN_VISIBLE + " INTEGER)");
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME);
        onCreate(db);
    }
}

/*
* 应用B中的ControlProvider  
*/
public class ControlProvider extends ContentProvider {
    public static final String AUTHORITY = "com.example.appb.controlprovider";
    public static final Uri CONTENT_URI = Uri.parse("content://" + AUTHORITY + "/control");

    private ControlDbHelper dbHelper;

    @Override
    public boolean onCreate() {
        dbHelper = new ControlDbHelper(getContext());
        return true;
    }

    @Nullable
    @Override
    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {
        SQLiteDatabase db = dbHelper.getReadableDatabase();
        String userId = selectionArgs[0];
        return db.query(ControlDbHelper.TABLE_NAME, new String[]{ControlDbHelper.COLUMN_VISIBLE},
                ControlDbHelper.COLUMN_USER_ID + " = ?", new String[]{userId},
                null, null, null);
    }

    @Nullable
    @Override
    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {
        return null;
    }

    @Override
    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {
        return 0;
    }

    @Override
    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) {
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        String userId = selectionArgs[0];
        return db.update(ControlDbHelper.TABLE_NAME, values,
                ControlDbHelper.COLUMN_USER_ID + " = ?", new String[]{userId});
    }

    @Nullable
    @Override
    public String getType(@NonNull Uri uri) {
        return null;
    }
}


// 应用B中在清单文件设置ContentProvider  
示例：在AndroidManifest.xml中设置权限
定义自定义权限
首先定义自定义权限：

xml
复制代码
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.appb">

    <!-- 定义自定义权限 -->
    <permission
        android:name="com.example.appb.permission.READ_CONTROL"
        android:protectionLevel="signature" />
    <permission
        android:name="com.example.appb.permission.WRITE_CONTROL"
        android:protectionLevel="signature" />

    <application
        ... >
        <!-- 声明ContentProvider -->
        <provider
            android:name=".ControlProvider"
            android:authorities="com.example.appb.controlprovider"
            android:exported="true"
            android:readPermission="com.example.appb.permission.READ_CONTROL"
            android:writePermission="com.example.appb.permission.WRITE_CONTROL" />
    </application>
</manifest>
设置ContentProvider的权限
在<provider>元素中，使用android:readPermission和android:writePermission属性指定读取和写入权限。

android:readPermission：指定读取权限。如果另一个应用需要读取ContentProvider的数据，它必须声明所需的权限。
android:writePermission：指定写入权限。如果另一个应用需要写入ContentProvider的数据，它必须声明所需的权限。
设置权限级别
在定义自定义权限时，可以使用android:protectionLevel属性来指定权限级别：

normal：普通权限，系统自动授予，不需要用户同意。
dangerous：危险权限，用户在安装时或运行时需要显式同意。
signature：只有签名相同的应用才能使用这个权限。
应用A使用权限
在应用A的AndroidManifest.xml中，声明对自定义权限的使用：

xml
复制代码
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.appa">

    <uses-permission android:name="com.example.appb.permission.READ_CONTROL" />
    <uses-permission android:name="com.example.appb.permission.WRITE_CONTROL" />

    <application
        ... >
        ...
    </application>
</manifest>
这样，只有声明了相应权限的应用才能访问ContentProvider的数据和功能，从而实现了对数据访问的控制和保护。


// 应用A使用权限
在应用A的AndroidManifest.xml中，声明对自定义权限的使用：

xml
复制代码
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.appa">

    <uses-permission android:name="com.example.appb.permission.READ_CONTROL" />
    <uses-permission android:name="com.example.appb.permission.WRITE_CONTROL" />

    <application
        ... >
        ...
    </application>
</manifest>

// 应用A中操作应用B的ContentProvider. 获取当前用户ID：在操作时传递当前用户ID。

java
复制代码
public class MainActivity extends AppCompatActivity {
    private String currentUserId; // 当前登录用户的ID

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // 假设从某个用户管理系统获取当前用户ID
        currentUserId = getCurrentUserId();

        Switch toggleSwitch = findViewById(R.id.toggle_switch);
        boolean isControlVisible = queryControlVisibility(currentUserId);
        toggleSwitch.setChecked(isControlVisible);

        toggleSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> {
            setControlVisibility(currentUserId, isChecked);
        });
    }

    private String getCurrentUserId() {
        // 从用户管理系统或登录信息中获取当前用户ID
        return "user_id_example"; // 示例
    }

    private boolean queryControlVisibility(String userId) {
        Cursor cursor = getContentResolver().query(
            Uri.parse("content://com.example.appb.controlprovider/control"),
            null, null, new String[]{userId}, null
        );
        if (cursor != null && cursor.moveToFirst()) {
            boolean isVisible = cursor.getInt(cursor.getColumnIndex("visible")) == 1;
            cursor.close();
            return isVisible;
        }
        return false;
    }

    private void setControlVisibility(String userId, boolean isVisible) {
        ContentValues contentValues = new ContentValues();
        contentValues.put("visible", isVisible);
        getContentResolver().update(
            Uri.parse("content://com.example.appb.controlprovider/control"),
            contentValues, null, new String[]{userId}
        );
    }
}

